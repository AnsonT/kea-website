// Input
selectors: ({ path, constants, actions, selectors }) => ({
  selectorName: [
    () => [selectors.inputSelector1, selectors.inputSelector2],
    (input1, input2) => createOutput(input),
    returnPropType
  ],

  computedValue: [
    () => [selectors.reducerKey, selectors.constantDefault],
    (reducerKey, constantDefault) => {
      return complicatedOperation(reducerKey, constantDefault)
    },
    PropTypes.object
  ]
})

// Output
myRandomSceneLogic.selectors == {
  // all reducer keys first,
  reducerKey: (state) => state.scenes.myRandomScene.index.reducerKey,
  constantDefault: (state) => state.scenes.myRandomScene.index.constantDefault,

  // other defined selectors
  selectorName: (state) => memoizedSelectorForSelectorName(state),
  computedValue: (state) => memoizedSelectorForComputedValue(state)
}

myRandomSceneLogic.selector == (state) => ({
  reducerKey: state.scenes.myRandomScene.index.reducerKey,
  constantDefault: state.scenes.myRandomScene.index.constantDefault,
  selectorName: memoizedSelectorForSelectorName(state),
  computedValue: memoizedSelectorForComputedValue(state)
})
