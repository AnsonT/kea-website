import api from './api'
import { take, race, put, fork, call } from 'redux-saga/effects'

// redux action creator
const loadUsers = (search) => ({ type: 'LOAD_USERS', payload: { search } })

// all saga effects must be run in generator functions
function * saga () {

  // here are some things you can do inside sagas

  // block until an action with the type "LOAD_USERS" was dispatched
  yield take('LOAD_USERS')

  // dispatch the redux action "loadUsers('something')"
  // == { type: 'LOAD_USERS', payload: { search: 'something' } }
  yield put(loadUsers('something'))

  // block until either the action 'LOAD_USERS' or the action 'LOAD_POSTS' got dispatched
  const winner = yield race({
    loadUsers: take('LOAD_USERS'),
    loadPosts: take('LOAD_POSTS'),
  })

  // in case the winner was loadUsers:
  // winner == { loadUsers: /* something */, loadPosts: undefined }
  console.log(winner)

  // anything that returns a promise (.then(result => {})) can also be accessed like this:
  const result = yield api.loadUsers()

  // start another saga in the background (will not block)
  yield fork(waitForUsersAction)

  // start another saga in the foreground (will block until it finishes)
  yield call(otherWorker)
}

function * otherWorker () {
  console.log('inside otherworker')
}

function * waitForUsersAction () {
  while (true) {
    yield take(LOAD_USERS)
    const result = yield api.loadUsers()
    yield put({ type: 'USERS_LOADED', payload: { result } })
  }
}
