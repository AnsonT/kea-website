// logic.js
import { PropTypes } from 'react'
import { kea } from 'kea'

export default kea({
  path: () => ['scenes', 'homepage', 'index'],

  actions: ({ constants }) => ({
    updateName: name => ({ name })
  }),

  reducers: ({ actions, constants }) => ({
    name: ['Chirpy', PropTypes.string, {
      [actions.updateName]: (state, payload) => payload.name
    }]
  }),

  selectors: ({ constants, selectors }) => ({
    capitalizedName: [
      () => [selectors.name],
      (name) => {
        return name.trim().split(' ').map(k => `${k.charAt(0).toUpperCase()}${k.slice(1).toLowerCase()}`).join(' ')
      },
      PropTypes.string
    ]
  })
})

// saga.js
import { createSaga } from 'kea'

import delay from '~/utils/delay'

export default createSaga({
  start: function * () {
    console.log('Starting homepage saga')

    this.count = 0

    while (true) {
      yield delay(1000)
      this.count += 1
      console.log(this.count)
    }
  },

  stop: function * () {
    console.log('Stopping homepage saga')
    console.log(`got to ${this.count}`)
  }
})

// index.js
import React, { Component } from 'react'
import { connect } from 'kea'

import sceneSaga from './saga'
import sceneLogic from './logic'

// or @kea({ connect: {...}, /* inline actions/reducers/etc */ })
@connect({
  actions: [
    sceneLogic, [
      'updateName'
    ]
  ],
  props: [
    sceneLogic, [
      'name',
      'capitalizedName'
    ]
  ],
  sagas: [
    sceneSaga
  ]
})
export default class HomepageScene extends Component {
  updateName = () => {
    const { name } = this.props
    const { updateName } = this.props.actions

    const newName = window.prompt('Please enter the name', name)

    if (newName) {
      updateName(newName)
    }
  }

  render () {
    const { capitalizedName } = this.props

    return (
      <div className='homepage-scene'>
        <h1>
          Hello, I'm <em onClick={this.updateName}>{capitalizedName}</em> the Kea
        </h1>
      </div>
    )
  }
}

